package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  
  laws {
    // Fill this. 
    means.get(0) ~ ContinuousUniform(0.0,1.0)
    variances.get(0) ~ Exponential(10.0)
    for (int i : 1 ..< groupSize) {
    		means.get(i) | RealVar previous = means.get(i-1) ~ ContinuousUniform(previous,1.0+previous)
    		variances.get(i) ~ Exponential(10.0)
    }
    
    // prior over permutations
    	for (Permutation permutation : permutations){ 
		permutation ~ UniformPermutation     
	}
 
	for (int rowIdx : 0 ..< nGroups) {
		for (int Idx : 0 ..< groupSize){
	      // likelihood
	      observations.getRealVar(rowIdx,Idx) |
	        means, variances,
	        IntVar ind = permutations.get(rowIdx).getConnections().get(Idx)      
	        ~ Normal(
	          means.get(ind),
	          variances.get(ind) 
	        )
	    }
	} 
  } 
}
